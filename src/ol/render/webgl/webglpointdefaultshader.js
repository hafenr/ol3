// This file is automatically generated, do not edit
goog.provide('ol.render.webgl.pointreplay.shader.Default');
goog.provide('ol.render.webgl.pointreplay.shader.Default.Locations');
goog.provide('ol.render.webgl.pointreplay.shader.DefaultFragment');
goog.provide('ol.render.webgl.pointreplay.shader.DefaultVertex');

goog.require('ol.webgl.shader');


/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @struct
 */
ol.render.webgl.pointreplay.shader.DefaultFragment = function() {
  goog.base(this, ol.render.webgl.pointreplay.shader.DefaultFragment.SOURCE);
};
goog.inherits(ol.render.webgl.pointreplay.shader.DefaultFragment, ol.webgl.shader.Fragment);
goog.addSingletonGetter(ol.render.webgl.pointreplay.shader.DefaultFragment);


/**
 * @const
 * @type {string}
 */
ol.render.webgl.pointreplay.shader.DefaultFragment.DEBUG_SOURCE = 'precision mediump float;\nvarying vec4 v_color;\n\n\n\nuniform float u_opacity;\n\nvoid main(void) {\n  gl_FragColor = v_color;\n  gl_FragColor *= u_opacity;\n}\n';


/**
 * @const
 * @type {string}
 */
ol.render.webgl.pointreplay.shader.DefaultFragment.OPTIMIZED_SOURCE = 'precision mediump float;varying vec4 a;uniform float f;void main(void){gl_FragColor=a;gl_FragColor*=f;}';


/**
 * @const
 * @type {string}
 */
ol.render.webgl.pointreplay.shader.DefaultFragment.SOURCE = goog.DEBUG ?
    ol.render.webgl.pointreplay.shader.DefaultFragment.DEBUG_SOURCE :
    ol.render.webgl.pointreplay.shader.DefaultFragment.OPTIMIZED_SOURCE;


/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @struct
 */
ol.render.webgl.pointreplay.shader.DefaultVertex = function() {
  goog.base(this, ol.render.webgl.pointreplay.shader.DefaultVertex.SOURCE);
};
goog.inherits(ol.render.webgl.pointreplay.shader.DefaultVertex, ol.webgl.shader.Vertex);
goog.addSingletonGetter(ol.render.webgl.pointreplay.shader.DefaultVertex);


/**
 * @const
 * @type {string}
 */
ol.render.webgl.pointreplay.shader.DefaultVertex.DEBUG_SOURCE = 'varying vec4 v_color;\n\n\nattribute vec2 a_position;\nattribute vec4 a_color;\nattribute float a_pointsize;\n\nuniform mat4 u_projectionMatrix;\n\nvoid main(void) {\n  v_color = a_color;\n  gl_Position = u_projectionMatrix * vec4(a_position, 0., 1.);\n  gl_PointSize = a_pointsize;\n}\n\n\n';


/**
 * @const
 * @type {string}
 */
ol.render.webgl.pointreplay.shader.DefaultVertex.OPTIMIZED_SOURCE = 'varying vec4 a;attribute vec2 b;attribute vec4 c;attribute float d;uniform mat4 e;void main(void){a=c;gl_Position=e*vec4(b,0.,1.);gl_PointSize=d;}';


/**
 * @const
 * @type {string}
 */
ol.render.webgl.pointreplay.shader.DefaultVertex.SOURCE = goog.DEBUG ?
    ol.render.webgl.pointreplay.shader.DefaultVertex.DEBUG_SOURCE :
    ol.render.webgl.pointreplay.shader.DefaultVertex.OPTIMIZED_SOURCE;


/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
ol.render.webgl.pointreplay.shader.Default.Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_opacity = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_opacity' : 'f');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_projectionMatrix = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_projectionMatrix' : 'e');

  /**
   * @type {number}
   */
  this.a_color = gl.getAttribLocation(
      program, goog.DEBUG ? 'a_color' : 'c');

  /**
   * @type {number}
   */
  this.a_pointsize = gl.getAttribLocation(
      program, goog.DEBUG ? 'a_pointsize' : 'd');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
      program, goog.DEBUG ? 'a_position' : 'b');
};
